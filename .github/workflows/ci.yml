name: CI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  docker-publish:
    # if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v3
        env:
          DOCKER_IMAGE_TAG: safeglobal/aa-stripe-service:latest
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAG }}
          # Use inline cache storage https://docs.docker.com/build/cache/backends/inline/
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline
      - name: Extract version
        id: version
        run: |
          NEW_VERSION=$(node -p 'require("./package.json").version')
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v3
        env:
          DOCKER_IMAGE_VERSION_TAG: safeglobal/aa-stripe-service:${{ steps.version.outputs.version }}
        with:
          push: true
          tags: ${{ env.DOCKER_IMAGE_VERSION_TAG }}
          # Use inline cache storage https://docs.docker.com/build/cache/backends/inline/
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_VERSION_TAG }}
          cache-to: type=inline

  # autodeploy:
  #   runs-on: ubuntu-latest
  #   needs: [ docker-publish ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Deploy
  #       run: bash scripts/autodeploy.sh
  #       env:
  #         AUTODEPLOY_URL: ${{ secrets.AUTODEPLOY_URL }}
  #         AUTODEPLOY_TOKEN: ${{ secrets.AUTODEPLOY_TOKEN }}
  #         TARGET_ENV: "staging"
